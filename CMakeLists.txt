cmake_minimum_required(VERSION 3.10)
project(Coroutine)

set(CMAKE_CXX_STANDARD 14)
find_package(Threads)
#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O3")
#SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pg")
#SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -pg")
#SET(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -pg")
#set(CMAKE_CXX_FLAGS -fsanitize=address)
#set(CMAKE_CXX_FLAGS -fsanitize-recover=address)
add_library(Coroutine Coroutine/Coroutine.cpp Coroutine/Coroutine.h unit/array_buf.cpp unit/array_buf.h unit/log.cpp unit/log.h unit/func.h ThreadPool/ThreadPool.cpp ThreadPool/ThreadPool.h ThreadPool/ThreadPool.cpp ThreadPool/ThreadPool.h ThreadPool/ThreadWorker.cpp ThreadPool/ThreadWorker.h ThreadPool/ThreadExecutor.h ThreadPool/ThreadExecutor.cpp asyncIO/poll.cpp asyncIO/poll.h asyncIO/sock.cpp asyncIO/sock.h async/async.cpp async/async.h async/Event.hpp async/Event.h async/AsyncThread.hpp asyncIO/ASock.hpp asyncIO/AIO.cpp asyncIO/AIO.h)
add_library(Coroutine_d SHARED)
add_executable(Coroutine_bin main.cpp)
target_link_libraries(Coroutine ${CMAKE_THREAD_LIBS_INIT})
target_link_libraries(Coroutine_bin Coroutine)
target_link_libraries(Coroutine_d Coroutine)

